<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>protege4</groupId>
	<artifactId>org.protege.common</artifactId>
	<packaging>jar</packaging>
	<name>Core Protege Libraries</name>
	<version>${core.major}.${core.minor}.${core.micro}.b${core.build}_${buildNumber}</version>

	<properties>
		<maven.compiler.source>1.5</maven.compiler.source>
		<maven.compiler.target>1.5</maven.compiler.target>
	</properties>

	<distributionManagement>
		<!-- If this pom.xml is executed on a developer's machine (mvn deploy) 
			the developer's local repositories will be used, if executed on the BMIR the BMIR repositories. -->
		<repository>
			<id>releases</id>
			<name>Releases</name>
			<url>${nexus.path}</url>
		</repository>

		<snapshotRepository>
			<id>snapshots</id>
			<name>Snapshots</name>
			<url>${nexus.path}</url>
		</snapshotRepository>
		
		
	</distributionManagement>

	<scm>
		<connection>scm:svn:http://smi-protege.stanford.edu/repos/protege/protege4/plugins/org.coode.dlquery/tags/dlquery-0.0.3</connection>
		<!--<developerConnection>scm:svn:https://127.0.0.1/svn/my-project</developerConnection>-->
		<tag>HEAD</tag>
		<url>http://smi-protege.stanford.edu/repos/protege/protege4/plugins/org.coode.dlquery/tags/dlquery-0.0.3</url>
	</scm>

	<dependencies>
        <dependency>
          <groupId>org.apache.felix</groupId>
          <artifactId>org.osgi.core</artifactId>
          <version>1.2.0</version>
        </dependency>
        <dependency>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
          <version>1.2.16</version>
        </dependency>
        <dependency>
          <groupId>com.jgoodies</groupId>
          <artifactId>looks</artifactId>
          <version>2.2.1</version>
        </dependency>
        <dependency>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
          <version>1.1.1</version>
        </dependency>
        <dependency>
          <groupId>commons-lang</groupId>
          <artifactId>commons-lang</artifactId>
          <version>1.0</version>
        </dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>5.10</version>
			<classifier>jdk15</classifier>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<description>DL-Query-Description</description>
	<organization>
		<name>Stanford University, BMIR</name>
	</organization>

	<build>
        <finalName>${project.artifactId}-${project.version}</finalName>
		<plugins>
            <!-- This plugin is needed to autoincrement the version number -->
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>buildnumber-maven-plugin</artifactId>
              <version>1.0-beta-3</version>
              <executions>
                <execution>
                  <phase>validate</phase>
                  <goals>
                    <goal>create</goal>
                  </goals>
                </execution>
              </executions>
              <configuration>
                <!-- the "0" refers to item[0] which is the timestamp -->
                <format>{0,date,yyyy_MM_dd_HH_mm_ss}</format>
                <items>
                  <item>timestamp</item>
                </items>
              </configuration>		
            </plugin>

			<!-- The properties plugin might be used to define certain parameters
			in a properties file. for demonstration purposes we did that to
			demonstrate how to customize the output directory (s. "next" plugin) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
			    <artifactId>properties-maven-plugin</artifactId>
    			<version>1.0-alpha-1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>version2.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>


            <plugin>
              <groupId>org.apache.felix</groupId>
              <artifactId>maven-bundle-plugin</artifactId>
              <version>1.4.0</version>
              <extensions>true</extensions>
              <configuration>
                <instructions>
                  <Export-Package>javax.swing</Export-Package>
                  <Private-Package>org.osgi.framework</Private-Package>
                  <Bundle-Activator>org.protege.common.Activator</Bundle-Activator>
                </instructions>
                <executions>
                  <execution>
                    <id>bundle-manifest</id>
                    <phase>install</phase>
                    <goals>    
                      <goal>manifest</goal>
                    </goals>   
                  </execution>
                </executions>
              </configuration>
            </plugin>

			<!-- Create jar file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
			</plugin>
		
		
			<!-- Execution of unit tests Generates output for reporting plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!-- We set skip to true. So the unit tests can be explicitly defined 
						in xml file reference below -->
					<skip>true</skip>
				</configuration>
				<executions>
					<execution>
						<id>unit-tests</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<skip>false</skip>
							<suiteXmlFiles>
								<suiteXmlFile>src/test/resources/unit-tests.xml</suiteXmlFile>
							</suiteXmlFiles>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compile Java Code -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			
			 <plugin>
               <artifactId>maven-deploy-plugin</artifactId>
               <version>2.5</version>
            </plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<!-- JavaDoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- JXR Plugin produces a cross-reference of the project's sources. The 
				generated reports make it easier for the user to reference or find specific 
				lines of code. It is also handy when used with the PMD Plugin for referencing 
				errors found in the code -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
			</plugin>

			<!--PMD scans Java source code and looks for potential problems like: 
				- Possible bugs - empty try/catch/finally/switch statements - Dead code - 
				unused local variables, parameters and private methods - Suboptimal code 
				- wasteful String/StringBuffer usage - Overcomplicated expressions - unnecessary 
				if statements, for loops that could be while loops - Duplicate code - copied/pasted 
				code means copied/pasted bugs -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<configuration>
					<linkXref>true</linkXref>
					<targetJdk>1.5</targetJdk>
				</configuration>
			</plugin>

			<!-- creates the web interface version of the test results -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
			</plugin>

			<!-- JDepend determines architecture metrics as (cyclic) dependencies 
				of packages -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
			</plugin>

			<!-- Cobertura determines statement and branch coverage -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<formats>
						<format>xml</format>
						<format>html</format>
					</formats>
				</configuration>
			</plugin>

			<!-- Checkstyle verifies compliance with coding stanards/guidelines -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<configLocation>
						${basedir}/src/main/resources/checkstyle/protege.xml
					</configLocation>
				</configuration>
			</plugin>

			<!-- Findbugs -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>1.1.1</version>
			</plugin>

			<!-- source measurement suite for Java which produces quantity & complexity 
				metrics -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>javancss-maven-plugin</artifactId>
				<version>2.0-beta-2</version>
			</plugin>

			<!-- XRadar summarizing/consolidating reports -->
			<plugin>
				<groupId>net.sf.xradar</groupId>
				<artifactId>maven-xradar-plugin</artifactId>
				<version>1.2.2</version>
				<configuration>
					<autoRadar>false</autoRadar>
					<!--false to execute only the plugins declared -->
				</configuration>
			</plugin>
		</plugins>

	</reporting>

</project>
